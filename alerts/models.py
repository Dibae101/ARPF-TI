from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from core.models import Rule, RequestLog

class Alert(models.Model):
    """
    The Alert model represents notifications generated by the WAF
    for suspicious or malicious activities.
    """
    ALERT_TYPES = [
        ('rule_match', 'Rule Match'),
        ('multiple_blocks', 'Multiple Blocks'),
        ('scan_detected', 'Scan Detected'),
        ('xss_attempt', 'XSS Attempt'),
        ('sqli_attempt', 'SQL Injection Attempt'),
        ('bot_activity', 'Bot Activity'),
        ('honeypot_hit', 'Honeypot Hit'),
        ('rate_limit', 'Rate Limit Exceeded'),
        ('geo_violation', 'Geographic Violation'),
        ('ai_detected', 'AI Model Detection'),
        ('other', 'Other')
    ]
    
    SEVERITY_LEVELS = [
        ('info', 'Informational'),
        ('low', 'Low'),
        ('medium', 'Medium'),
        ('high', 'High'),
        ('critical', 'Critical')
    ]
    
    ALERT_STATUS = [
        ('suggested', 'Suggested by Gemini'),
        ('confirmed', 'Confirmed and Sent'),
        ('ignored', 'Ignored'),
        ('standard', 'Standard Alert')
    ]
    
    alert_type = models.CharField(max_length=20, choices=ALERT_TYPES)
    severity = models.CharField(max_length=10, choices=SEVERITY_LEVELS, default='medium')
    title = models.CharField(max_length=255)
    description = models.TextField()
    source_ip = models.GenericIPAddressField(null=True, blank=True)
    triggered_rule = models.ForeignKey(Rule, on_delete=models.SET_NULL, null=True, blank=True)
    related_logs = models.ManyToManyField(RequestLog, blank=True)
    timestamp = models.DateTimeField(default=timezone.now)
    is_acknowledged = models.BooleanField(default=False)
    acknowledged_by = models.CharField(max_length=255, blank=True, null=True)
    acknowledged_at = models.DateTimeField(null=True, blank=True)
    gemini_raw_suggestion = models.TextField(blank=True, null=True, help_text="Gemini AI raw suggestion text about this alert")
    alert_status = models.CharField(max_length=15, choices=ALERT_STATUS, default='standard', help_text="Status of the alert for notification purposes")
    notification_sent = models.BooleanField(default=False, help_text="Whether this alert has been sent to notification channels")
    
    def __str__(self):
        return f"{self.title} ({self.get_severity_display()} - {self.timestamp})"
    
    def acknowledge(self, user_name):
        """Mark the alert as acknowledged."""
        self.is_acknowledged = True
        self.acknowledged_by = user_name
        self.acknowledged_at = timezone.now()
        self.save()

class GeminiSuggestion(models.Model):
    """Suggestions from Gemini AI about alerts"""
    alert = models.OneToOneField(Alert, on_delete=models.CASCADE, related_name='gemini_suggestion')
    should_notify = models.BooleanField(default=False, help_text="Whether Gemini suggests sending a notification")
    assessment = models.CharField(max_length=255, default="No assessment available", help_text="Brief assessment (Yes/No)")
    reasoning = models.TextField(default="No reasoning provided", help_text="Reasoning for the assessment")
    suggested_actions = models.TextField(blank=True, null=True, help_text="Suggested actions to take")
    confidence_score = models.FloatField(default=0.0, help_text="Confidence score (0.0 to 1.0)")
    raw_response = models.JSONField(default=dict, help_text="Raw response from Gemini API")
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    
    # Feedback fields
    feedback_rating = models.IntegerField(null=True, blank=True, help_text="Rating given to this suggestion (1-5)")
    feedback_notes = models.TextField(blank=True, null=True, help_text="Notes from admin feedback")
    feedback_timestamp = models.DateTimeField(null=True, blank=True, help_text="When feedback was provided")
    
    def __str__(self):
        return f"Gemini Suggestion for Alert #{self.alert.id}: {self.assessment}"

class AlertNotificationConfig(models.Model):
    """
    Configuration for alert notifications through different channels
    such as email, Slack, webhook, etc.
    """
    NOTIFICATION_TYPES = [
        ('email', 'Email'),
        ('slack', 'Slack'),
        ('webhook', 'Webhook'),
        ('sms', 'SMS')
    ]
    
    name = models.CharField(max_length=100, help_text="A descriptive name for this configuration")
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, help_text="Channel type for notifications")
    min_severity = models.CharField(max_length=10, choices=Alert.SEVERITY_LEVELS, default='high', 
                                  help_text="Minimum severity level to trigger notification")
    recipients = models.TextField(blank=True, null=True, 
                                help_text="Recipients for the notification (comma-separated emails, Slack channels, etc.)")
    configuration = models.JSONField(default=dict, help_text="Additional configuration in JSON format")
    is_active = models.BooleanField(default=True, help_text="Whether this notification configuration is active")
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} ({self.get_notification_type_display()})"
    
    def should_notify(self, alert):
        """Check if an alert should trigger this notification based on severity."""
        severity_order = {'info': 0, 'low': 1, 'medium': 2, 'high': 3, 'critical': 4}
        min_severity_level = severity_order.get(self.min_severity, 0)
        alert_severity_level = severity_order.get(alert.severity, 0)
        
        return self.is_active and alert_severity_level >= min_severity_level
        
class AlertComment(models.Model):
    """Comments on alerts from users"""
    alert = models.ForeignKey(Alert, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(default=timezone.now)
    
    def __str__(self):
        return f"Comment on {self.alert} by {self.user.username}"
